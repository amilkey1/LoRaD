map_world_coarse <- aggregate(map_world, fact = 2)
res(map_world); res(map_world_coarse) ## half the resolution
## perhaps you want to use some other function (e.g., sum)
map_world_coarse_sum <-  aggregate(map_world, fact = 2, fun = "sum")
plot(map_world_coarse)
## sometimes you want to combine several layers into the same object
## basically the inverse of what we did to calculate map_world
ag_prec <- rast(list(sum_ag = map_world_coarse_sum,
mean_ag = map_world_coarse)) ## okay, slightly artificial example!
plot(ag_prec)
## weighted functions - say you want nearby cells to contribute more
## first define a weighting scheme, say with central ones being 0.4, rook adjacent 0.1
## and bishop adjacent 0.05 weight (adds up to 1)
weight_mat <- rbind(c(0.05, 0.1, 0.05),
c(0.1, 0.4, 0.1),
c(0.05, 0.1, 0.05)) ## not sure this makes practical sense,
#but... shows the principle
prec_smooth <- focal(map_world, w = weight_mat, fun = sum, na.rm = TRUE)
res(prec_smooth)
plot(prec_smooth); plot(map_world)
india <- filter(world, name_long == "India")
st_crs(india)$proj4string
crs(map_world) ##they are compariable - if not we'd want to transform them
transform
map_india <- crop(map_world, india)
plot(map_india); plot(st_geometry(india), add =TRUE, reset = FALSE, border = "grey50")
# note that areas outside are plotted
## can mask to set all values outside the boundary to NA, so they aren't plotted
map_india <- mask(map_india, india)
plot(map_india); plot(st_geometry(india), add =TRUE, reset = FALSE, border = "grey50")
## generally you want to crop and mask to focus on the data of interest
# very often you want to pick out points within a data set. So, if I want the
# rainfall for some of the major cities in India I can do
india_cities <- filter(cities, SOV0NAME == "India")
map_india_cities <- extract(map_india, india_cities)
# then add this to the india_cities dataframe
india_cities$map <- map_india_cities
# and plot with the precipitation indicated with the size of the circle
plot(st_geometry(india_cities), cex = india_cities$map$sum/2000, add = TRUE)
## load phytools
library(phytools)
## assign colors for the two states
colors<-setNames(c("gray","black"),0:1) colors
## assign colors for the two states
colors<-setNames(c("gray","black"),0:1)
colors
## simulate a stochastic pure-birth tree with 100 taxa
tree<-pbtree(n=100,scale=1)
## divide plotting area into three panels
par(mfrow=c(1,3))
## Q matrix for simulation 1: equal backward & forward
## rates (ER)
Q1<-matrix(c(-1,1,1,-1),2,2, byrow=TRUE,dimnames=list(0:1,0:1))
Q1
## simulate ER character evolution and plot
plot(sim.history(tree,Q1,message=FALSE),
colors,ftype="off",mar=c(1.1,1.1,1.1,0.1)) mtext("(a)",line=-1,adj=0) legend(x="bottomleft",legend=c("0","1"),
## simulate ER character evolution and plot
plot(sim.history(tree,Q1,message=FALSE), colors,ftype="off",mar=c(1.1,1.1,1.1,0.1))
mtext("(a)",line=-1,adj=0) legend(x="bottomleft",legend=c("0","1"),
mtext("(a)",line=-1,adj=0) legend(x="bottomleft",legend=c("0","1"),
mtext("(a)",line=-1,adj=0)
## simulate ER character evolution and plot
plot(sim.history(tree,Q1,message=FALSE), colors,ftype="off",mar=c(1.1,1.1,1.1,0.1))
mtext("(a)",line=-1,adj=0)
plot(sim.history(tree,Q1,message=FALSE), colors,ftype="off",mar=c(1.1,1.1,1.1,0.1))
mtext("(a)",line=-1,adj=0)
legend(x="bottomleft",legend=c("0","1"),
pt.cex=1.5,pch=15,col=colors, bty="n")
## Q matrix for simulation 2: different backward &
## forward transition rates (ARD)
Q2<-matrix(c(-1,1,0.25,-25),2,2,
byrow=TRUE,dimnames=list(0:1,0:1))
Q2
plot(sim.history(tree,Q2, direction="row_to_column",message=FALSE), colors,ftype="off",mar=c(1.1,1.1,1.1,0.1))
mtext("(b)",line=-1,adj=0)
## Q matrix for (effectively) irreversible trait
## evolution (changes from 1->0, but not the reverse)
Q3<-matrix(c(-1e-12,1e-12,1,-1),2,2,
byrow=TRUE,dimnames=list(0:1,0:1))
Q3
## simulate irreversible character evolution and plot
plot(sim.history(tree,Q3,anc="1", direction="row_to_column", message=FALSE),colors,ftype="off", mar=c(1.1,1.1,1.1,0.1))
mtext("(c)",line=-1,adj=0)
plot(sim.history(tree,Q3,anc="1", direction="row_to_column", message=FALSE),colors,ftype="off", mar=c(1.1,1.1,1.1,0.1))
mtext("(c)",line=-1,adj=0)
library(geiger)
## read data matrix
sqData<-read.csv("squamate-data.csv",row.names=1) ## print dimensions of our data frame
dim(sqData)
## read phylogenetic tree
sqTree<-read.nexus("squamate.tre")
print(sqTree,printlen=2)
## plot our tree
plotTree(sqTree,type="fan",lwd=1,fsize=0.3,ftype="i")
## check name matching
chk<-name.check(sqTree,sqData)
summary(chk)
## drop tips of tree that are missing from data matrix
sqTree.pruned<-drop.tip(sqTree,chk$tree_not_data)
## drop rows of matrix that are missing from tree
sqData.pruned<-sqData[!(rownames(sqData)%in%chk$data_not_tree),,drop=FALSE]
## extract discrete trait
toes<-setNames(as.factor(sqData.pruned[,"rear.toes"]),
rownames(sqData.pruned)) head(toes)
## extract discrete trait
toes<-setNames(as.factor(sqData.pruned[,"rear.toes"]),rownames(sqData.pruned))
head(toes)
## fit ER model to squamate toe data using fitDiscrete
fitER<-fitDiscrete(sqTree.pruned,toes,model="ER")
## fit ER model to squamate toe data using fitDiscrete
fitER<-fitDiscrete(sqTree.pruned,toes,model="ER")
print(fitER,digits=3)
## plot fitted ER model
plot(fitER,mar=rep(0,4),signif=5)
## fit SYM model
fitSYM<-fitDiscrete(sqTree.pruned,toes,model="SYM")
## fit SYM model
fitSYM<-fitDiscrete(sqTree.pruned,toes,model="SYM")
print(fitSYM,digits=3)
## fit ARD model
fitARD<-fitDiscrete(sqTree.pruned,toes,model="ARD") print(fitARD,digits=3)
## fit ARD model
fitARD<-fitDiscrete(sqTree.pruned,toes,model="ARD")
## fit ARD model
fitARD<-fitDiscrete(sqTree.pruned,toes,model="ARD")
print(fitARD,digits=3)
``
## plot fitted model
plot(fitARD,show.zeros=FALSE,mar=rep(0,4),signif=5)
ordered.model<-matrix(c( 0,1,0,0,0,0, 2,0,3,0,0,0, 0,4,0,5,0,0, 0,0,6,0,7,0, 0,0,0,8,0,9, 0,0,0,0,10,0),6,6,byrow=TRUE, dimnames=list(0:5,0:5))
ordered.model
## create design matrix for directional ordered ## model
directional.model<-matrix(c(
0,0,0,0,0,0,
1,0,0,0,0,0,
0,2,0,0,0,0,
0,0,3,0,0,0,
0,0,0,4,0,0, 0,0,0,0,5,0),6,6,byrow=TRUE, dimnames=list(0:5,0:5))
directional.model
# number of params = # of unique positive integers
## fit bi-directional ordered model
fitOrdered<-fitDiscrete(sqTree.pruned,toes,
model=ordered.model,surpressWarnings=TRUE)
# number of params = # of unique positive integers
## fit bi-directional ordered model
fitOrdered<-fitDiscrete(sqTree.pruned,toes,
model=ordered.model,surpressWarnings=TRUE)
print(fitOrdered,digits=3)
print(fitOrdered,digits=3)
fitDirectional<-fitDiscrete(sqTree.pruned,toes, model=directional.model,surpressWarnings=TRUE)
print(fitDirectional,digits=3)
## split plot area into two panels
par(mfrow=c(1,2))
## plot ordered and directional models
plot(fitOrdered,show.zeros=FALSE,signif=5, mar=c(0.1,1.1,0.1,0.1)) mtext("(a)",line=-2,adj=0,cex=1.5) plot(fitDirectional,show.zeros=FALSE,signif=5,
## plot ordered and directional models
plot(fitOrdered,show.zeros=FALSE,signif=5, mar=c(0.1,1.1,0.1,0.1))
mtext("(a)",line=-2,adj=0,cex=1.5) plot(fitDirectional,show.zeros=FALSE,signif=5,
mtext("(a)",line=-2,adj=0,cex=1.5)
plot(fitOrdered,show.zeros=FALSE,signif=5, mar=c(0.1,1.1,0.1,0.1))
mtext("(a)",line=-2,adj=0,cex=1.5)
plot(fitDirectional,show.zeros=FALSE,signif=5, mar=c(0.1,1.1,0.1,0.1))
mtext("(b)",line=-2,adj=0,cex=1.5)
library(lmtest)
## likelihood-ratio test comparing ER & SYM
lrtest(fitER,fitSYM)
## likelihood-ratio test comparing ER & ARD
lrtest(fitER,fitARD)
## likelihood-ratio test comparing SYM & ARD
lrtest(fitSYM,fitARD)
## compare directional and ordered
lrtest(fitDirectional,fitOrdered)
## compare direction and ARD
lrtest(fitDirectional,fitARD)
## compare ordered and ARD
lrtest(fitOrdered,fitARD)
## accumulate AIC scores of all five models into
## a vector
aic<-setNames(c(AIC(fitER),AIC(fitDirectional), AIC(fitOrdered),AIC(fitSYM),AIC(fitARD)), c("ER","Directional","Ordered","SYM","ARD"))
aic
# directional model is best supported
# compute Akaike weights
aic.w(aic)
# combine all comparisons into one table
round(data.frame( k=c(fitER$opt$k,fitDirectional$opt$k, fitOrdered$opt$k,fitSYM$opt$k,fitARD$opt$k), logL=c(logLik(fitER),logLik(fitDirectional), logLik(fitOrdered),logLik(fitSYM),logLik(fitARD)), AIC=aic,Akaike.w=as.vector(aic.w(aic))),3)
## load libraries
library(phytools)
## read tree from file
eel.tree<-read.tree("elopomorph.tre")
print(eel.tree,printlen=2)
## read data
eel.data<-read.csv("elopomorph.csv",row.names=1, stringsAsFactors=TRUE)
head(eel.data)
## extract total body length and log-transform
lnTL<-setNames(log(eel.data$Max_TL_cm),rownames(eel.data))
head(lnTL)
## estimate ancestral states using fastAnc
fit.lnTL<-fastAnc(eel.tree,lnTL,vars=TRUE,CI=TRUE)
print(fit.lnTL,printlen=10)
## plot eel phylogeny using plotTree
plotTree(eel.tree,ftype="i",fsize=0.5,lwd=1)
## add node labels for reference
labelnodes(1:eel.tree$Nnode+Ntip(eel.tree), 1:eel.tree$Nnode+Ntip(eel.tree), interactive=FALSE,cex=0.5)
plotTree(eel.tree,ftype="i",fsize=0.5,lwd=1)
## add node labels for reference
labelnodes(1:eel.tree$Nnode+Ntip(eel.tree), 1:eel.tree$Nnode+Ntip(eel.tree), interactive=FALSE,cex=0.5)
eel.contMap<-contMap(eel.tree,lnTL, plot=FALSE,lims=c(2.7,5.8))
## change the color gradient to a custom gradient
eel.contMap<-setMap(eel.contMap, c("white","orange","black"))
## plot "contMap" object
plot(eel.contMap,sig=2,fsize=c(0.4,0.7), lwd=c(2,3),leg.txt="log(total length cm)")
## identify the tips descended from node 102
tips<-extract.clade(eel.tree,102)$tip.label
tips
## plot object
plot(pruned.contMap,xlim=c(-2,90),lwd=c(3,4), fsize=c(0.7,0.8))
pruned.contMap<-keep.tip.contMap(eel.contMap,tips)
## plot object
plot(pruned.contMap,xlim=c(-2,90),lwd=c(3,4), fsize=c(0.7,0.8))
## add error bars
errorbar.contMap(pruned.contMap,lwd=8)
## simulate a tree & some data
tree<-pbtree(n=26,scale=1,tip.label=LETTERS)
## simulate with ancestral states
x<-fastBM(tree,internal=TRUE)
## ancestral states
a<-x[1:tree$Nnode+Ntip(tree)]
## tip data
x<-x[tree$tip.label]
## estimate ancestral states for simulated data
fit<-fastAnc(tree,x,CI=TRUE)
print(fit,printlen=6)
par(mar=c(5.1,4.1,2.1,2.1))
plot(a,fit$ace,xlab="true states",ylab="estimated states",
bty="n",bg="gray",cex=1.5,pch=21,las=1,cex.axis=0.8)
plot(a,fit$ace,xlab="true states", ylab="estimated states",bty="n", ylim=range(fit$CI95),col="transparent", las=1,cex.axis=0.8)
## add 1:1 line
lines(range(c(x,a)),range(c(x,a)), col="red",lwd=2) ## 1:1 line
## use a for loop to add vertical lines showing ## each confidence interval
for(i in 1:tree$Nnode)
lines(rep(a[i],2),fit$CI95[i,],lwd=5, col=make.transparent("blue",0.25), lend=0)
## create a legend
legend(x="topleft",legend=c("95% CI for ancestral state",
"1:1 line"),col=c(make.transparent("blue",0.25), "red"),lty=c("solid","solid"),lwd=c(5,2),cex=0.7, bty="n")
# compute the fraction of CIs in simulation in which the true ancestral state falls within the 95 percent CI for that state
withinCI<-((a>=fit$CI95[,1]) & (a<=fit$CI95[,2]))
table(withinCI)
mean(withinCI)
# compute the fraction of CIs in simulation in which the true ancestral state falls within the 95 percent CI for that state
withinCI<-((a>=fit$CI95[,1]) & (a<=fit$CI95[,2]))
table(withinCI)
mean(withinCI)
# after a large number of simulations, we should on average find that 95% percent of the confidence intervals included the true value of the state at each node
## custom function that conducts a simulation, estimates ## ancestral states, & returns the fraction on 95% CI
foo<-function(){
tree<-pbtree(n=100) x<-fastBM(tree,internal=TRUE) fit<-fastAnc(tree,x[1:length(tree$tip.label)],
# after a large number of simulations, we should on average find that 95% percent of the confidence intervals included the true value of the state at each node
## custom function that conducts a simulation, estimates ## ancestral states, & returns the fraction on 95% CI
foo<-function(){
tree<-pbtree(n=100)
x<-fastBM(tree,internal=TRUE) fit<-fastAnc(tree,x[1:length(tree$tip.label)],
# after a large number of simulations, we should on average find that 95% percent of the confidence intervals included the true value of the state at each node
## custom function that conducts a simulation, estimates ## ancestral states, & returns the fraction on 95% CI
foo<-function(){
tree<-pbtree(n=100)
x<-fastBM(tree,internal=TRUE) fit<-fastAnc(tree,x[1:length(tree$tip.label)],
# after a large number of simulations, we should on average find that 95% percent of the confidence intervals included the true value of the state at each node
## custom function that conducts a simulation, estimates ## ancestral states, & returns the fraction on 95% CI
foo<-function(){
tree<-pbtree(n=100)
x<-fastBM(tree,internal=TRUE) fit<-fastAnc(tree,x[1:length(tree$tip.label)],
# after a large number of simulations, we should on average find that 95% percent of the confidence intervals included the true value of the state at each node
## custom function that conducts a simulation, estimates ## ancestral states, & returns the fraction on 95% CI
foo<-function(){
tree<-pbtree(n=100)
x<-fastBM(tree,internal=TRUE)
fit<-fastAnc(tree,x[1:length(tree$tip.label)], CI=TRUE)
withinCI<-((x[1:tree$Nnode+length(tree$tip.label)]>=fit$CI95[,1]) &      (x[1:tree$Nnode+length(tree$tip.label)]<= fit$CI95[,2]))
mean(withinCI) }
## conduct 100 simulations
pp<-replicate(100,foo())
## conduct 100 simulations
pp<-replicate(100,foo())
mean(pp)
## simulate a vector of data under a trend model
y<-fastBM(tree,mu=2,internal=TRUE)
## set margins
par(mar=c(5.1,4.1,2.1,2.1))
## plot traitgram with known states
phenogram(tree,y,fsize=0.6, color=make.transparent("blue",0.5), spread.cost=c(1,0),cex.axis=0.8, las=1)
# now estimate ancestral states while incorrectly assuming Brownian model
## estimate ancestral states
fit.trend<-fastAnc(tree,y[tree$tip.label],CI=TRUE) ## set margins
par(mar=c(5.1,4.1,2.1,2.1))
par(mar=c(5.1,4.1,2.1,2.1))
## create plot showing true states vs. estimated
## states
plot(a<-y[1:tree$Nnode+Ntip(tree)],fit.trend$ace, xlab="true states",
ylab="estimated states",bty="n", ylim=range(fit.trend$CI95),col="transparent", cex.axis=0.8,las=1)
## add 1:1 line & lines showing CI of each estimate
lines(range(y),range(y),lty="dashed", col="red") ## 1:1 line
for(i in 1:tree$Nnode)
lines(rep(a[i],2),fit.trend$CI95[i,],lwd=5, x =
col=make.transparent("blue",0.25), lend=0)
lines(rep(a[i],2),fit.trend$CI95[i,],lwd=5,
col=make.transparent("blue",0.25), lend=0)
par(mar=c(5.1,4.1,2.1,2.1))
## create plot showing true states vs. estimated
## states
plot(a<-y[1:tree$Nnode+Ntip(tree)],fit.trend$ace, xlab="true states",
ylab="estimated states",bty="n", ylim=range(fit.trend$CI95),col="transparent", cex.axis=0.8,las=1)
## add 1:1 line & lines showing CI of each estimate
lines(range(y),range(y),lty="dashed", col="red") ## 1:1 line
for(i in 1:tree$Nnode)
lines(rep(a[i],2),fit.trend$CI95[i,],lwd=5,
col=make.transparent("blue",0.25), lend=0)
points(a,fit.trend$ace,bg="grey",cex=1.5,pch=21) ## plot legend
legend(x="bottomright", legend=c("estimated ancestral state", "95% CI for ancestral state", "1:1 line"),cex=0.7,col=c("black", make.transparent("blue",0.25), "red"),pch=c(21,NA,NA),pt.bg=c("grey",NA,NA), pt.cex=c(1.5,NA,NA),bty="n", lty=c(NA,"solid","dashed"),lwd=c(NA,5,1))
## extract feeding mode as a vector
feed.mode<-setNames(eel.data[,1],rownames(eel.data))
## set colors for plotting
cols<-setNames(c("red","lightblue"),levels(feed.mode))
## plot the tree & data
plotTree.datamatrix(eel.tree,as.data.frame(feed.mode), colors=list(cols),header=FALSE,fsize=0.45) ## add legend
legend("topright",legend=levels(feed.mode),pch=22, pt.cex=1.5,pt.bg=cols,bty="n",cex=0.8)
# 8.4.1 Choosing a character model
## fit ER model
fitER<-fitMk(eel.tree,feed.mode,model="ER")
# 8.4.1 Choosing a character model
## fit ER model
fitER<-fitMk(eel.tree,feed.mode,model="ER")
## fit ARD model
fitARD<-fitMk(eel.tree,feed.mode,model="ARD")
## fit bite->suction model
fit01<-fitMk(eel.tree,feed.mode,model=matrix(c(0,1,0,0),2,2,byrow=TRUE)) ## fit suction->bite model
fit10<-fitMk(eel.tree,feed.mode, model=matrix(c(0,0,1,0),2,2,byrow=TRUE))
fit10<-fitMk(eel.tree,feed.mode, model=matrix(c(0,0,1,0),2,2,byrow=TRUE))
## extract AIC values for each model
aic<-c(AIC(fitER),AIC(fitARD),AIC(fit01),AIC(fit10))
## fit ARD model
fitARD<-fitMk(eel.tree,feed.mode,model="ARD")
## fit bite->suction model
fit01<-fitMk(eel.tree,feed.mode,model=matrix(c(0,1,0,0),2,2,byrow=TRUE)) ## fit suction->bite model
fit10<-fitMk(eel.tree,feed.mode, model=matrix(c(0,0,1,0),2,2,byrow=TRUE))
## extract AIC values for each model
aic<-c(AIC(fitER),AIC(fitARD),AIC(fit01),AIC(fit10))
## print summary table
data.frame(model=c("ER","ARD","bite->suction", "suction->bite"), logL=c(logLik(fitER),logLik(fitARD), logLik(fit01),logLik(fit10)), AIC=aic,delta.AIC=aic-min(aic))
library(corHMM)
## create new data frame for corHMM
eel.data<-data.frame(Genus_sp=names(feed.mode), feed.mode=as.numeric(feed.mode)-1)
head(eel.data,n=10)
## estimate joint ancestral states using corHMM
fit.joint<-corHMM(eel.tree,eel.data,node.states="joint",
rate.cat=1,rate.mat=matrix(c(NA,1,1,NA),2,2))
fit.joint
plotTree.datamatrix(eel.tree,as.data.frame(feed.mode), colors=list(cols),header=FALSE,fsize=0.45)
## add legend
legend("topright",legend=levels(feed.mode),pch=22, pt.cex=1.5,pt.bg=cols,bty="n",cex=0.8)
## add node labels showing ancestral states
nodelabels(pie=to.matrix(levels(feed.mode)[fit.joint$phy$node.label], levels(feed.mode)),piecol=cols,cex=0.4)
## estimate marginal ancestral states under a ER model
fit.marginal<-corHMM(eel.tree,eel.data,node.states="marginal",
rate.cat=1,rate.mat=matrix(c(NA,1,1,NA),2,2))
## estimate marginal ancestral states under a ER model
fit.marginal<-corHMM(eel.tree,eel.data,node.states="marginal",
rate.cat=1,rate.mat=matrix(c(NA,1,1,NA),2,2))
fit.marginal
head(fit.marginal$states)
plotTree.datamatrix(eel.tree,as.data.frame(feed.mode), colors=list(cols),header=FALSE,fsize=0.45) ## add legend
legend("topright",legend=levels(feed.mode),pch=22, pt.cex=1.5,pt.bg=cols,bty="n",cex=0.8)
## add node labels showing marginal ancestral states
nodelabels(pie=fit.marginal$states,piecol=cols, cex=0.5)
## generate one stochastic character history
mtree<-make.simmap(eel.tree,feed.mode,model="ER")
## plot single stochastic map
plot(mtree,cols,fsize=0.4,ftype="i",lwd=2,offset=0.4, ylim=c(-1,Ntip(eel.tree)))
## add legend
legend("bottomleft",legend=levels(feed.mode),pch=22, pt.cex=1.5,pt.bg=cols,bty="n",cex=0.8)
plot(mtree,cols,fsize=0.4,ftype="i",lwd=2,offset=0.4, ylim=c(-1,Ntip(eel.tree)))
## add legend
legend("bottomleft",legend=levels(feed.mode),pch=22, pt.cex=1.5,pt.bg=cols,bty="n",cex=0.8)
# but we need to look at the whole distribution from a sample of stochastic maps
## generate 1,000 stochastic character maps in which
## the transition rate is sampled from its posterior
## distribution
mtrees<-make.simmap(eel.tree,feed.mode,model="ER", nsim=1000,Q="mcmc",vQ=0.01, prior=list(use.empirical=TRUE),samplefreq=10)
# but we need to look at the whole distribution from a sample of stochastic maps
## generate 1,000 stochastic character maps in which
## the transition rate is sampled from its posterior
## distribution
mtrees<-make.simmap(eel.tree,feed.mode,model="ER", nsim=1000,Q="mcmc",vQ=0.01, prior=list(use.empirical=TRUE),samplefreq=10)
``
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 4000, 5000)
avg_ESS <- c(0.16429, 0.1653556, 0.176399, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711055, 0.171144)
plot(avg_ESS ~ particle_num)
plot(avg_ESS ~ particle_num)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000)
avg_ESS <- c(0.16429, 0.1653556, 0.176399, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144)
plot(avg_ESS ~ particle_num)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000)
avg_ESS <- c(0.16429, 0.1653556, 0.172188, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144)
plot(avg_ESS ~ particle_num)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144)
plot(avg_ESS ~ particle_num)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000, 700)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144, 0.1714071429)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000, 700, 300)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144, 0.1714071429, 0.1707956667)
plot(avg_ESS ~ particle_num)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000, 700, 300, 4500)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144, 0.1714071429, 0.1707956667, 0.1708906667)
plot(avg_ESS ~ particle_num)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000, 700, 300, 4500, 0.1)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144, 0.1714071429, 0.1707956667, 0.1708906667, 0.239852)
plot(avg_ESS ~ particle_num)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000, 700, 300, 4500, 300)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144, 0.1714071429, 0.1707956667, 0.1708906667, 0.1703076667)
plot(avg_ESS ~ particle_num)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000, 700, 300, 4500, 300, 200)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144, 0.1714071429, 0.1707956667, 0.1708906667, 0.1703076667, 0.1864455)
plot(avg_ESS ~ particle_num)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000, 700, 300, 4500, 300, 200, 400)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144, 0.1714071429, 0.1707956667, 0.1708906667, 0.1703076667, 0.1864455, 677.023)
plot(avg_ESS ~ particle_num)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000, 700, 300, 4500, 300, 200, 400)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144, 0.1714071429, 0.1707956667, 0.1708906667, 0.1703076667, 0.1864455, 0.16925575)
plot(avg_ESS ~ particle_num)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000, 700, 300, 4500, 300, 200, 4)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144, 0.1714071429, 0.1707956667, 0.1708906667, 0.1703076667, 0.1864455, 0.16925575)
plot(avg_ESS ~ particle_num)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000, 700, 300, 4500, 3, 2, 4)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144, 0.1714071429, 0.1707956667, 0.1708906667, 0.1703076667, 0.1864455, 0.16925575)
plot(avg_ESS ~ particle_num)
particle_num <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000, 700, 300, 4500, 3, 2, 4, 2500)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144, 0.1714071429, 0.1707956667, 0.1708906667, 0.1703076667, 0.1864455, 0.16925575, 0.1711492)
plot(avg_ESS ~ particle_num)
particle_num <- c(5000, 10000, 100000)
MCSE <- c(, 0.26088, 0.20909, 0.04924)
MCSE <- c(0.26088, 0.20909, 0.04924)
particle_num1 <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000, 700, 300, 4500, 3, 2, 4, 2500)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144, 0.1714071429, 0.1707956667, 0.1708906667, 0.1703076667, 0.1864455, 0.16925575, 0.1711492)
plot(avg_ESS ~ particle_num)
particle_num2 <- c(5000, 10000, 100000)
MCSE <- c(0.26088, 0.20909, 0.04924)
plot(MCSE ~ particle_num2)
particle_num2 <- c(5000, 10000, 100000, 50000)
MCSE <- c(0.26088, 0.20909, 0.04924, 0.06060)
plot(MCSE ~ particle_num2)
particle_num2 <- c(5000, 10000, 100000, 50000, 20000)
MCSE <- c(0.26088, 0.20909, 0.04924, 0.06060, 0.11983)
plot(MCSE ~ particle_num2)
particle_num2 <- c(5000, 10000, 100000, 50000, 20000, 200000)
MCSE <- c(0.26088, 0.20909, 0.04924, 0.06060, 0.11983, 0.04765)
plot(MCSE ~ particle_num2)
plot(avg_ESS ~ particle_num, xlab = "number of particles / 1000")
particle_num1 <- c(1, 5, 10, 100, 500, 1000, 2000, 3000, 3500, 4000, 5000, 700, 300, 4500, 3, 2, 4, 2500)
avg_ESS <- c(0.16429, 0.1653556, 0.173513, 0.171411, 0.170999, 0.170904, 0.170798, 0.170884, 0.1711114286, 0.1711055, 0.171144, 0.1714071429, 0.1707956667, 0.1708906667, 0.1703076667, 0.1864455, 0.16925575, 0.1711492)
plot(avg_ESS ~ particle_num, xlab = "number of particles / 1000")
plot(avg_ESS ~ particle_num1, xlab = "number of particles / 1000")
particle_num2 <- c(5000, 10000, 100000, 50000, 20000, 200000)
MCSE <- c(0.26088, 0.20909, 0.04924, 0.06060, 0.11983, 0.04765)
plot(MCSE ~ particle_num2, xlab = "number of particles")
plot(avg_ESS ~ particle_num1, xlab = "number of particles / 1000", pch=16)
plot(MCSE ~ particle_num2, xlab = "number of particles", pch=16)
plot(avg_ESS ~ particle_num1, xlab = "number of particles / 1000", ylab = "ESS per particle", pch=16)
particle_num2 <- c(5000, 10000, 100000, 50000, 20000, 200000)
MCSE <- c(0.26088, 0.20909, 0.04924, 0.06060, 0.11983, 0.04765)
plot(MCSE ~ particle_num2, xlab = "number of particles", pch=16)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
# install packages
# install.packages("devtools")
install.packages("roxygen2")
# create framework for package
devtools::create("LoRaD")
# load data
param_file <- read.table("\test\params.log")
# load data
param_file <- read.table(\test\params.log)
# load data
param_file <- read.table(test\params.log)
# load data
param_file <- read.table(test/params.log)
getwd()
setwd("/Users/analisamilkey/Documents/projects/LoRaD/LoRaD/R")
# load data
param_file <- read.table(test/params.log)
# load data
param_file <- read.table(../test/params.log)
# load data
param_file <- read.table("../test/params.lo"g)
read.table("..")
# load data
param_file <- read.table("../test/params.log")
# load conf file
conf_file <- read.table("../test/loradml.conf")
# load conf file
conf_file <- read.table("../test/loradml.conf", fill = TRUE)
# load conf file
conf_file <- read.table("../test/loradml.conf", fill = TRUE)
View(param_file)
View(conf_file)
# load conf file
conf_file <- read.table("../test/loradml.conf")
View(conf_file)
View(conf_file)
transform <- function(params, colspec) {
